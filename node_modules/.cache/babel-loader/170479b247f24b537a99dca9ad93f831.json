{"ast":null,"code":"var _jsxFileName = \"/Users/mason/Desktop/User-Onboarding2/src/Form.js\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport * as yup from \"yup\";\nconst formSchema = yup.object().shape({\n  name: yup.string().required(\"Name is a required field.\"),\n  password: yup.string().min(6, \"Password must be 6 characters long\"),\n  email: yup.string().email(\"Has to be a valid email address.\").required(\"Must include email address.\"),\n  terms: yup.boolean().oneOf([true], \"please agree to terms of use\")\n});\nexport default function Form() {\n  // state for whether our button should be disabled or not.\n  const [buttonDisabled, setButtonDisabled] = useState(true); // managing state for our form inputs\n\n  const [formState, setFormState] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    terms: \"\"\n  }); // state for our errors\n\n  const [errors, setErrors] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    terms: \"\"\n  }); // new state to set our post request too. So we can console.log and see it.\n\n  const [users, setUsers] = useState([]);\n  useEffect(() => {\n    formSchema.isValid(formState).then(valid => {\n      setButtonDisabled(!valid);\n    });\n  }, [formState]);\n\n  const formSubmit = e => {\n    e.preventDefault();\n    axios.post(\"https://reqres.in/api/users\", formState).then(res => {\n      setUsers(res.data); // get just the form data from the REST api\n      // reset form if successful\n\n      setFormState({\n        name: \"\",\n        email: \"\",\n        password: \"\",\n        terms: \"\"\n      });\n    }).catch(err => console.log(err.response));\n  };\n\n  const validateChange = e => {\n    // Reach will allow us to \"reach\" into the schema and test only one part.\n    yup.reach(formSchema, e.target.name).validate(e.target.value).then(valid => {\n      setErrors({ ...errors,\n        [e.target.name]: \"\"\n      });\n    }).catch(err => {\n      setErrors({ ...errors,\n        [e.target.name]: err.errors[0]\n      });\n    });\n  };\n\n  const inputChange = e => {\n    e.persist();\n    const newFormData = { ...formState,\n      [e.target.name]: e.target.type === \"checkbox\" ? e.target.checked : e.target.value\n    };\n    validateChange(e);\n    setFormState(newFormData);\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: formSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, \"Name\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    value: formState.name,\n    onChange: inputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }), errors.name.length > 0 ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 35\n    }\n  }, errors.name) : null), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, \"Email\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"email\",\n    value: formState.email,\n    onChange: inputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }), errors.email.length > 0 ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }, errors.email) : null), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }, \"Password\", /*#__PURE__*/React.createElement(\"input\", {\n    name: \"password\",\n    value: formState.password,\n    onChange: inputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }), errors.password.length > 0 ? /*#__PURE__*/React.createElement(\"p\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 11\n    }\n  }, errors.password) : null), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"terms\",\n    className: \"terms\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }, \"Terms & Conditions\", /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    name: \"terms\",\n    checked: formState.terms,\n    onChange: inputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"pre\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }\n  }, JSON.stringify(users, null, 2)), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    disabled: buttonDisabled,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, \"Submit Here\"));\n}","map":{"version":3,"sources":["/Users/mason/Desktop/User-Onboarding2/src/Form.js"],"names":["React","useState","useEffect","axios","yup","formSchema","object","shape","name","string","required","password","min","email","terms","boolean","oneOf","Form","buttonDisabled","setButtonDisabled","formState","setFormState","errors","setErrors","users","setUsers","isValid","then","valid","formSubmit","e","preventDefault","post","res","data","catch","err","console","log","response","validateChange","reach","target","validate","value","inputChange","persist","newFormData","type","checked","length","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport * as yup from \"yup\";\n\nconst formSchema = yup.object().shape({\n  name: yup.string().required(\"Name is a required field.\"),\n  password: yup.string().min(6, \"Password must be 6 characters long\"),\n  email: yup\n    .string()\n    .email(\"Has to be a valid email address.\")\n    .required(\"Must include email address.\"),\n  terms: yup.boolean().oneOf([true], \"please agree to terms of use\"),\n\n});\n\nexport default function Form() {\n  // state for whether our button should be disabled or not.\n  const [buttonDisabled, setButtonDisabled] = useState(true);\n\n  // managing state for our form inputs\n  const [formState, setFormState] = useState({\n    name: \"\",\n    email: \"\",\n    password:\"\",\n    terms: \"\"\n\n  });\n\n  // state for our errors\n  const [errors, setErrors] = useState({\n    name: \"\",\n    email: \"\",\n    password:\"\",\n    terms: \"\"\n  });\n\n  // new state to set our post request too. So we can console.log and see it.\n  const [users, setUsers] = useState([]);\n\n  useEffect(() => {\n    formSchema.isValid(formState).then(valid => {\n      setButtonDisabled(!valid);\n    });\n  }, [formState]);\n\n  const formSubmit = e => {\n    e.preventDefault();\n    axios\n      .post(\"https://reqres.in/api/users\", formState)\n      .then(res => {\n        setUsers(res.data); // get just the form data from the REST api\n\n        // reset form if successful\n        setFormState({\n          name: \"\",\n          email: \"\",\n          password:\"\",\n          terms: \"\"\n        });\n      })\n      .catch(err => console.log(err.response));\n  };\n\n  const validateChange = e => {\n    // Reach will allow us to \"reach\" into the schema and test only one part.\n    yup\n      .reach(formSchema, e.target.name)\n      .validate(e.target.value)\n      .then(valid => {\n        setErrors({\n          ...errors,\n          [e.target.name]: \"\"\n        });\n      })\n      .catch(err => {\n        setErrors({\n          ...errors,\n          [e.target.name]: err.errors[0]\n        });\n      });\n  };\n\n  const inputChange = e => {\n    e.persist();\n    const newFormData = {\n      ...formState,\n      [e.target.name]:\n        e.target.type === \"checkbox\" ? e.target.checked : e.target.value\n    };\n\n    validateChange(e);\n    setFormState(newFormData);\n  };\n\n  return (\n    <form onSubmit={formSubmit}>\n      <label htmlFor=\"name\">\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={formState.name}\n          onChange={inputChange}\n        />\n        {errors.name.length > 0 ? <p className=\"error\">{errors.name}</p> : null}\n      </label>\n      <label htmlFor=\"email\">\n        Email\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={formState.email}\n          onChange={inputChange}\n        />\n        {errors.email.length > 0 ? (\n          <p className=\"error\">{errors.email}</p>\n        ) : null}\n      </label>\n      <label htmlFor=\"password\">\n        Password\n        <input\n          name=\"password\"\n          value={formState.password}\n          onChange={inputChange}\n        />\n        {errors.password.length > 0 ? (\n          <p className=\"error\">{errors.password}</p>\n        ) : null}\n      </label>\n\n      <label htmlFor=\"terms\" className=\"terms\">\n      Terms & Conditions\n        <input\n          type=\"checkbox\"\n          name=\"terms\"\n          checked={formState.terms}\n          onChange={inputChange}\n        />\n      </label>\n      {/* displaying our post request data */}\n      <pre>{JSON.stringify(users, null, 2)}</pre>\n      <button type=\"submit\" disabled={buttonDisabled}>Submit Here</button>\n    </form>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}